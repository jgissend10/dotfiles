# Enter a running Docker container.
function denter() {
  if [[ ! "$1" ]] ; then
      echo "You must supply a container ID or name."
      return 0
  fi

  docker exec -it $1 bash
  return 0
}

# Delete a given line number in the known_hosts file.
knownrm() {
  re='^[0-9]+$'
  if ! [[ $1 =~ $re ]] ; then
    echo "error: line number missing" >&2;
  else
    sed -i '' "$1d" ~/.ssh/known_hosts
  fi
}

# Create a new directory and enter it
function mkd() {
    mkdir -p "$@" && cd "$_";
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* *;
    fi;
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}";
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesnâ€™t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}

up() {
    path=""
    let i=${1:-1}
    while [[ $i -gt 0 ]]
    do
        path="../"$path
	i=$((i-1))
    done
    cd $path
}

function g {
 if [[ $# > 0 ]]
 then
     git $@
 else
     git status
 fi
}

function register-project {
    if [ -z $PROJECTS_DIR ] ; then
        echo "PROJECTS_DIR not currently set. Can't register projects. Suggestion '~/.projects/'";
    elif [ -d "$1" ] ; then
        project_name=`basename $1`
        if [ -d "$PROJECTS_DIR$project_name" ]; then
            echo "Project already registered. (`readlink $PROJECTS_DIR$project_name`)"
        else
            echo "Linking `pwd`/$1 to $PROJECTS_DIR$project_name"
            ln -s `pwd`/$1 $PROJECTS_DIR$project_name
        fi
    elif [ -f "$1" ]; then
        echo "Must register a directory"
    else
        cwd=`pwd`
        project_name=`basename $cwd`
        if [ -d "$PROJECTS_DIR$project_name" ]; then
            echo "Project already registered. (`readlink $PROJECTS_DIR$project_name`)"
        else
            echo "Linking $cwd to $PROJECTS_DIR$project_name"
            ln -s $cwd $PROJECTS_DIR$project_name
        fi
    fi
}

function unregister-project {
    if [ -z $PROJECTS_DIR ] ; then
        echo "PROJECTS_DIR not currently set. Can't register projects. Suggestion '~/.projects/'";
    elif [ -d "$PROJECTS_DIR$1" ] ; then
        rm $PROJECTS_DIR$1
    else
        echo "$1 is not a registered project"
    fi
}

workon() {
    if [ -d "$PROJECTS_DIR$@" ]; then
        cd `readlink $PROJECTS_DIR$@`
    else
        echo "Project $a doesn't exist."
    fi
}

list-projects() {
    ls $PROJECTS_DIR | cut -f 1
}

# Extract most known archives with one command
extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1     ;;
      *.tar.gz)    tar xzf $1     ;;
      *.bz2)       bunzip2 $1     ;;
      *.rar)       unrar e $1     ;;
      *.gz)        gunzip $1      ;;
      *.tar)       tar xf $1      ;;
      *.tbz2)      tar xjf $1     ;;
      *.tgz)       tar xzf $1     ;;
      *.zip)       unzip $1       ;;
      *.Z)         uncompress $1  ;;
      *.7z)        7z x $1        ;;
      *)     echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

function ml() {
  mkdir -p "$(dirname "$1")" && rsync -aP --no-links "$1" "$2" && ln -sf "$2" "$1"
}

function localip(){
	function _localip(){ echo "ðŸ“¶  "$(ipconfig getifaddr "$1"); }
	export -f _localip
	local purple="\x1B\[35m" reset="\x1B\[m"
	networksetup -listallhardwareports | \
		gsed -r "s/Hardware Port: (.*)/${purple}\1${reset}/g" | \
		gsed -r "s/Device: (en.*)$/_localip \1/e" | \
		gsed -r "s/Ethernet Address:/ðŸ“˜ /g" | \
		gsed -r "s/(VLAN Configurations)|==*//g"
}

removelink() {
  if [ -L "$1" ]; then
    location=$(readlink "$1")
    rm "$1"
    ln "$location" "$1"
  else
    echo "Not a link"
  fi
}
